#!/bin/sh
#
# Configure 1.74 1998/07/03 17:47:57
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.0 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and
# limitations under the License.
#
# The initial developer of the original code is David A. Hinds
# <dhinds@hyper.stanford.edu>.  Portions created by David A. Hinds
# are Copyright (C) 1998 David A. Hinds.  All Rights Reserved.
#
#=======================================================================

# Minimal requirements for sanity
if /bin/echo --version | grep -q -- -version ; then
    echo "Ack!  Your shell utilities are too old for this script!"
    echo "    Upgrade to GNU shell utilities version 1.16 or later."
    exit 1
fi
#if [ ! -f include/linux/udf.h ] ; then
#    echo "Ack!  The UDF distribution is incomplete/damaged!"
#    echo "    Unpack again."
#    exit 1
#fi

if [ -r config.out ] ; then
    . ./config.out 2>/dev/null
else
    if [ ! -r config.in ] ; then
	echo "config.in does not exist!"
	exit 1
    fi
    . ./config.in
fi

CONFIG=config.new
# CONFIG_H=linux/udf_config.h
CONFIG_MK=config.mk
MODVER=include/linux/modversions.h
rm -f .prereq.ok $CONFIG $CONFIG_H $CONFIG_MK $MODVER
touch $CONFIG_MK

cat << 'EOF' > $CONFIG
#
# Automatically generated by 'make config' -- don't edit!
#
EOF

write_bool() {
    value=`eval echo '$'$1`
    if [ "$value" = "y" ] ; then
	echo "$1=y" >> $CONFIG
	echo "$1=y" >> $CONFIG_MK
    else
	echo "# $1 is not defined" >> $CONFIG
	echo "# $1 is not defined" >> $CONFIG_MK
    fi
}

write_str () {
    value=`eval echo '$'$1`
    echo "$1"=\"$value\" >> $CONFIG
    echo "$1=$value" >> $CONFIG_MK
}

write_num () {
    value=`eval echo '$'$1`
    if [ "$value" ] ; then
	echo "$1=$value" >> $CONFIG
	echo "$1=$value" >> $CONFIG_MK
    else
	echo "# $1 is not defined" >> $CONFIG
	echo "# $1 is not defined" >> $CONFIG_MK
    fi
}

ask_bool () {
    default=`eval echo '$'$2`
    if [ "$default" = "" ] ; then default=n ; fi
    answer=""
    while [ "$answer" != n -a "$answer" != y ] ; do
	/bin/echo -e "$1 (y/n) [$default]: \c"
	read answer
	if [ -z "$answer" ] ; then answer="$default" ; fi
    done
    eval "$2=$answer"
    write_bool $2
}

ask_str () {
    default=`eval echo '$'$2`
    answer=""
    /bin/echo -e "$1 [$default]: \c"
    read answer
    if [ -z "$answer" ] ; then answer="$default" ; fi
    eval "$2"=\"$answer\"
    write_str $2
}

ask_num () {
    default=`eval echo '$'$2`
    answer=""
    /bin/echo -e "$1 [$default]: \c"
    read answer
    if [ -z "$answer" ] ; then answer="$default" ; fi
    eval "$2"=\"$answer\"
    write_num $2
}

#=======================================================================

echo ""
echo "Linux UDF Configuration Script"
echo ""
echo "The default responses for each question are correct for most users."
echo ""

ask_str "Linux source directory" LINUX

if [ ! -f $LINUX/Makefile ] ; then
    echo "Linux source tree $LINUX does not exist!"
    echo "    See the HOWTO for a list of FTP sites for current" \
	 "kernel sources."
    echo "    I will try to make a best guess."
    echo ""
    has_makefile=0
else
    has_makefile=1
fi

ask_str "Alternate target install directory" PREFIX

ask_str "C compiler name" CC

ask_str "Linker name" LD

ask_bool "UDF Write Support" CONFIG_WRITE

ask_str "Compiler flags for debugging" PCDEBUG

echo ""
if [ $has_makefile -eq 1 ] ; then
	echo "The UDF driver needs to be compiled to match the kernel it"
	echo "will be used with, or it may fail to load."
	echo "If you are not sure what to do, please consult the UDF manual."
	echo ""
	echo "How would you like to set kernel-specific options?"
	echo "    1 - Read from the currently running kernel"
	echo "    2 - Read from the Linux source tree"

	src=""
	while [ "$src" != 1 -a "$src" != 2  ] ; do
	    /bin/echo -e "Enter option (1-2) [1]: \c"
	    read src
	    if [ -z "$src" ] ; then src=1 ; fi
	done
	echo ""
else
	src=1
fi

#=======================================================================

symcheck () {
    if $KSYMS | grep -q "$1" ; then
	eval "$2=y"
    else
	eval "$2=n"
    fi
}

modcheck () {
    if [ "$2" = "y" ] ; then return ; fi
    insmod $1 > /dev/null 2>&1
    if lsmod | grep -q "^$1 " ; then
	eval "$2=y"
	INSTALL_DEPMOD=y
    fi
}

configcheck () {
    value=`eval echo '$'$1`
    if [ "$value" = "m" ] ; then
	eval "$1=y"
	INSTALL_DEPMOD=y
    fi
}

printflag() {
    value=`eval echo '$'$2`
    /bin/echo -e "    $1 is \c"
    if [ "$value" = "y" ] ; then
	echo "enabled."
    else
	echo "disabled."
    fi
    write_bool $2
}

printnum() {
    value=`eval echo '$'$2`
    /bin/echo -e "    $1 is $value"
    write_num $2
}

printconfig () {
    echo "Kernel configuration options:"
    printflag "Symmetric multiprocessing support" CONFIG_SMP
    printnum "Max physical memory in MB" CONFIG_MAX_MEMSIZE
    printflag "Advanced Power Management (APM) support" CONFIG_APM
    printflag "Networking support" CONFIG_INET
    printflag "Module version checking" CONFIG_MODVERSIONS
}

echo "" >> $CONFIG
echo "" >> $CONFIG_MK

case $src in
    1)
	if /sbin/ksyms -a | grep -q printk ; then
	    KSYMS="/sbin/ksyms -a"
	else
	    echo "Hmmm... /sbin/ksyms is broken.  Using /proc/ksyms..."
	    KSYMS="cat /proc/ksyms"
	fi
	echo "# Options from current kernel" >> $CONFIG
	echo "# Options from current kernel" >> $CONFIG_MK
	echo "CHECK=\"/proc/version\"" >> $CONFIG
	echo "CKSUM=\"`cksum < /proc/version`\"" >> $CONFIG
	symcheck smp_invalidate_needed CONFIG_SMP
	# No way to probe for this at the moment...
	CONFIG_MAX_MEMSIZE=1024
	symcheck apm_register_callback CONFIG_APM
	symcheck register_netdev CONFIG_INET
	symcheck inet_proto_ops CONFIG_IPV6_MODULE
	symcheck printk_R CONFIG_MODVERSIONS
	echo "Extracting kernel symbol versions..."
	$KSYMS | sed -ne 's/.* \(.*\)_R\([0-9a-f]*\)/\1 \2/p' | \
	    awk '{ printf "#define %s\t%s_R%s\n", $1, $1, $2 }' \
	    > $MODVER
	printconfig
	;;
    2)
	AUTOCONF=$LINUX/.config
	if [ ! -r $AUTOCONF ] ; then
	    echo "**********************************"
	    echo "Config file $AUTOCONF not present!"
	    echo "To fix, run:"
	    echo "      cd $LINUX"
	    echo "      make menuconfig"
	    echo "      make dep"
	    echo " "
	    exit 1
	fi
	echo "# Options from $AUTOCONF" >> $CONFIG
	echo "# Options from $AUTOCONF" >> $CONFIG_MK
	echo "CHECK=\"$AUTOCONF\"" >> $CONFIG
	echo "CKSUM=\"`cksum < $AUTOCONF`\"" >> $CONFIG
	. $AUTOCONF
	printconfig
	;;
esac


ARCH=`uname -m`
echo "ARCH=$ARCH" >> $CONFIG_MK

if [ $src != "1" -a "$CONFIG_MODVERSIONS" = "y" ] ; then
    MODVER="$LINUX/$MODVER"
    if [ ! -r $MODVER ] ; then
	echo "$MODVER does not exist!"
	echo "    To fix, run 'make dep' in $LINUX."
	exit 1
    fi
else
    MODVER="../$MODVER"
fi

if [ ! -r $LINUX/include/asm ] ; then
    echo "$LINUX/include/asm does not exist!"
    echo "    To fix, do 'ln -s asm-i386 asm' in $LINUX/include."
    exit 1
fi

if [ "$CONFIG_SMP" = "y" ] ; then
    echo "SMPFLAG=-D__SMP__" >> $CONFIG_MK
fi

if [ "$CONFIG_WRITE" = "y" ] ; then
	echo "WRITEFLAG=-DCONFIG_UDF_RW=1" >> $CONFIG_MK
else
	echo "WRITEFLAG=-DCONFIG_UDF_RW=0" >> $CONFIG_MK
fi

echo "" >> $CONFIG
echo "" >> $CONFIG_MK

#=======================================================================

# What kernel are we compiling for?

echo ""
if [ $has_makefile -eq 1 ] ; then
	VERSION=`sed -n -e 's/^VERSION = \(.*\)/\1/p' $LINUX/Makefile`
	PATCHLEVEL=`sed -n -e 's/^PATCHLEVEL = \(.*\)/\1/p' $LINUX/Makefile`
	SUBLEVEL=`sed -n -e 's/^SUBLEVEL = \(.*\)/\1/p' $LINUX/Makefile`
	EXTRAVERSION=`sed -n -e 's/^EXTRAVERSION = \(.*\)/\1/p' $LINUX/Makefile`
	SRC_RELEASE=$VERSION.$PATCHLEVEL.$SUBLEVEL$EXTRAVERSION
	VERSION_CODE=`expr $VERSION \* 65536 + $PATCHLEVEL \* 256 + $SUBLEVEL`
	echo "The kernel source tree is version $SRC_RELEASE."
	CUR_RELEASE=`uname -r`
	if [ "$SRC_RELEASE" != "$CUR_RELEASE" ] ; then
	    echo "WARNING: the current kernel is actually version $CUR_RELEASE."
	fi
else
	SRC_RELEASE=`uname -r`
	VERSION=`echo $SRC_RELEASE | sed -n -e 's/^\([0-9]*\).*/\1/p'`
	PATCHLEVEL=`echo $SRC_RELEASE | sed -n -e 's/.*\.\([0-9]*\)\..*/\1/p'`
	SUBLEVEL=`echo $SRC_RELEASE | sed -n -e 's/.*\.\([0-9]*\)$/\1/p'`
	CUR_RELEASE=$SRC_RELEASE
	echo "The kernel source tree is version $SRC_RELEASE."
fi

# Check for consistent kernel build dates

CUR_D=`uname -v | sed -e 's/^#[0-9]* //'`
echo "The current kernel build date is $CUR_D."
UTS_VERSION="unknown";
if [ -f $LINUX/include/linux/compile.h ] ; then
    UTS_VERSION=`grep UTS_VERSION $LINUX/include/linux/compile.h |
	sed -e 's/.*"\(.*\)"/\1/'`
    SRC_D=`echo $UTS_VERSION | sed -e 's/^#[0-9]* //'`
    if [ $SRC_RELEASE = $CUR_RELEASE -a "$SRC_D" != "$CUR_D" ] ; then
	echo "WARNING: the source tree has a build date of $SRC_D."
	if [ `date -d "$SRC_D" +%s` -gt `date -d "$CUR_D" +%s` ] ; then
	    echo "   Did you forget to install your new kernel?!?"
	fi
    fi
fi
if [ $src -eq 1 ] ; then UTS_VERSION=`uname -v` ; fi

case "$VERSION.$PATCHLEVEL" in
2.2|2.3)
	if [ "$CONFIG_MODVERSIONS" = "y" ] ; then
		echo "MFLAG=-DMODVERSIONS -include $MODVER" >> $CONFIG_MK
	fi
	if [ $PATCHLEVEL -eq 1 ] ; then
		if [ $SUBLEVEL -gt 30 -a $SUBLEVEL -lt 34 ] ; then
			echo "Kernel versions 2.1.31-33 are broken.  Upgrade to 2.1.34."
			exit 1
		fi
	fi
	if [ $PATCHLEVEL -eq 3 ] ; then
		if [ $SUBLEVEL -lt 7 ] ; then
			echo "This version requires the new vfs code in 2.3.7+."
			exit 1
		fi
	fi
	;;
*)
	echo "This package requires a 2.2/2.3 series kernel."
	exit 1
	;;
esac

UTS_RELEASE=`grep UTS_RELEASE $LINUX/include/linux/version.h | awk '{print $3}' | sed 's/"//g'`
if [ ! $UTS_RELEASE ] ; then
	echo "Cannot determine version from version.h. Using Makefile."
	UTS_RELEASE=$CUR_RELEASE
fi
UTS_SHORT=`echo $UTS_RELEASE | sed 's/[^0-9\.].*//' | sed 's/.[0-9]*$//'`
write_str UTS_RELEASE
write_str UTS_SHORT
write_str UTS_VERSION
echo "LINUX_VERSION_CODE=$VERSION_CODE" >> $CONFIG
echo "LINUX_VERSION_CODE=$VERSION_CODE" >> $CONFIG_MK

echo "" >> $CONFIG
echo "" >> $CONFIG_MK
echo ""

#=======================================================================

# make symlink for src and patch directories
if [ -L src ]; then
	rm src
fi
if [ -d linux-$UTS_SHORT ]; then
	ln -s linux-$UTS_SHORT src
else
	echo "Linux version $UTS_SHORT not supported."
fi

if [ -L patch ]; then
	rm patch
fi
if [ -d patch-$UTS_SHORT ]; then
	ln -s patch-$UTS_SHORT patch
else
	echo No patch for Linux version $UTS_SHORT.
fi

#=======================================================================

# Check out the module stuff

if [ ! -x /sbin/insmod -o ! -x /sbin/rmmod ] ; then
    echo "Your module utilities (insmod, rmmod) are missing from /sbin!"
    echo "    To fix, you should build and install the latest set" \
         "of module tools,"
    echo "    available from FTP sites listed in the HOWTO."
    exit 1
fi

MOD_RELEASE=`/sbin/insmod -V 2>&1 | \
    sed -n -e 's/.*[Vv]ersion \([0-9][0-9.]*\)/\1/p'`
echo "Your module utilities are version $MOD_RELEASE."
case "$VERSION.$PATCHLEVEL" in
2.0)
    NEED=2.0.0
    ;;
2.1)
    if [ $SUBLEVEL -lt 18 ] ; then
	NEED=2.0.0
    elif [ $SUBLEVEL -lt 85 ] ; then
	NEED=2.1.23
    else
	NEED=2.1.85
    fi
    ;;
esac

MIN=`/bin/echo -e "$MOD_RELEASE\n$NEED" | sort -t. +0n -1 +1n -2 +2n | head -1`
if [ "$MIN" != "$NEED" ] ; then
    echo "Your module utilities are too old for this kernel!"
    echo "    To fix, upgrade to at least version $NEED."
    exit 1
fi


mv $CONFIG config.out

touch .prereq.ok
